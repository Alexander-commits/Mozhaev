︠1d10a629-e649-417d-be3b-a20d0dde53a2s︠
def legendre(n, p):
    return pow(n, (p - 1) // 2, p)

def prime_mod_sqrt(n, p):
    """
    Извлечение корня по простому модулю:
    R^2 = n mod p
    """
    # Простые случаи:
    if n == 0:
        return [0]
    if p == 2:
        return [n]
    #Проверка n-квадратичный вычет по модулю p
    assert legendre(n, p) == 1, "not n square (mod p)"

    if p % 4 == 3:
        R = pow(n, (p + 1)/4, p)
        return [R, p-R]

    # Выделяем степень двойки из p-1 в виде q * 2^s (Q-нечётно):
    q, s = p - 1, 0
    while q % 2 == 0:
        s += 1
        q //= 2

    # Выбираем произвольный квадратичный невычет z по модулю p:
    z = 1
    while legendre_symbol(z, p) != -1:
        z += 1
    c = pow(z, q, p)

    # Ищем решение:
    R = pow(n, (q + 1)/2, p)
    t = pow(n, q, p)
    m = s
    while t != 1:
        # Ищем наименьщее i, такое что t^(2^i) = 1:
        i, e = 0, 2
        for i in xrange(1, m):
            if pow(t, e, p) == 1:
                break
            e *= 2

        # Обновляем значения и повтроям цикл:
        b = pow(c, 2**(m - i - 1), p)
        R = (R * b) % p
        t = (t * b * b) % p
        c = (b * b) % p
        m = i
    #Выводим первое решение R и второе решение p-R
    return [R, p-R]
n = 486^175
p = next_prime(10^886)
%time print(prime_mod_sqrt(n,p))
︡07ef4dd1-a8f1-40a5-ad10-ccd8cc6c2b90︡{"stdout":"[3851792887502633972973751909415608906993610814107186024000678882325884335713828919324629917432317544919745139305308957271746107567442747490347320860530155989705898546643533385221945405688754149400827445605165205007242788288060319670616734075553715721274492428421236508663015036379188298754780856411761910642349199809946779284368304225954248299919274648246430100103046140089557694751914348067431709018120754699028139402583545492651878763605599543623071338496980808827500258924097986416250844384842671985375336198395826534380115821995669110459677849409586065280145035252371030477575487976964830394829569458860055164396505913816599498357876968727602972708760316440762104260564846681101243852356991933607110708503570445061542841353659003169282749523629332117214272634747864207553477163482340655133600160808534279841578973596103278141109116380811904342681052808385074857342255962330024083353, 6148207112497366027026248090584391093006389185892813975999321117674115664286171080675370082567682455080254860694691042728253892432557252509652679139469844010294101453356466614778054594311245850599172554394834794992757211711939680329383265924446284278725507571578763491336984963620811701245219143588238089357650800190053220715631695774045751700080725351753569899896953859910442305248085651932568290981879245300971860597416454507348121236394400456376928661503019191172499741075902013583749155615157328014624663801604173465619884178004330889540322150590413934719854964747628969522424512023035169605170430541139944835603494086183400501642123031272397027291239683559237895739435153318898756147643008066392889291496429554938457158646340996830717250476370667882785727365252135792446522836517659344866399839191465720158421026403896721858890883619188095657318947191614925142657744037669975916726]\n"}︡{"stdout":"\nCPU time: 0.02 s, Wall time: 0.02 s\n"}︡{"done":true}
︠8c461215-2511-4aca-ae67-a34f21316d8fs︠
n = 486^175
p = next_prime(10^886)
%time mod(n, p).sqrt()
︡e98ad346-70db-4668-a8a5-185d6d4810b3︡{"stdout":"3851792887502633972973751909415608906993610814107186024000678882325884335713828919324629917432317544919745139305308957271746107567442747490347320860530155989705898546643533385221945405688754149400827445605165205007242788288060319670616734075553715721274492428421236508663015036379188298754780856411761910642349199809946779284368304225954248299919274648246430100103046140089557694751914348067431709018120754699028139402583545492651878763605599543623071338496980808827500258924097986416250844384842671985375336198395826534380115821995669110459677849409586065280145035252371030477575487976964830394829569458860055164396505913816599498357876968727602972708760316440762104260564846681101243852356991933607110708503570445061542841353659003169282749523629332117214272634747864207553477163482340655133600160808534279841578973596103278141109116380811904342681052808385074857342255962330024083353"}︡{"stdout":"\n"}︡{"stdout":"\nCPU time: 81.52 s, Wall time: 85.67 s\n"}︡{"done":true}









